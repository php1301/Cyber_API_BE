swagger: "2.0"
info:
  description: "Cyber API"
  version: "1.0.0"
  title: "Cyber API"
  # termsOfService: "http://swagger.io/terms/"
  # contact:
  #   email: "apiteam@swagger.io"
  # license:
  #   name: "Apache 2.0"
  #   url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
# - name: "QuanLyDatVe"
  # externalDocs:
  #   description: "Find out more"
  #   url: "http://swagger.io"
- name: "user"
- name: "phim"
schemes:
- "https"
- "http"
paths:
  # USER
  /api/user/LayDanhSachLoaiNguoiDung:
    get:
      tags:
      - "user"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      # parameters:
      # - name: "petId"
      #   in: "path"
      #   description: "ID of pet to return"
      #   required: true
      #   type: "integer"
      #   format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
  /api/user/login:
    post:
      tags:
      - "user"
      summary: "Đăng nhập"
      description: ""
      operationId: "dangNhap"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/user/register:
    post:
      tags:
      - "user"
      summary: "Đăng ký"
      description: ""
      operationId: "dangKy"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/user/user-list:
    get:
      tags:
      - "user"
      summary: "Lấy danh sách người dùng"
      description: ""
      operationId: "danhSachNguoiDung"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/user/user-list-pagination:
    get:
      tags:
      - "user"
      summary: "Lấy danh sách người dùng phân trang"
      description: "[admin] lấy danh sách người dùng phân trang"
      operationId: "danhsachNguoiDungPhanTrang"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/user/{taiKhoan}:
    get:
      tags:
      - "user"
      summary: "Lấy thông tin tài khoản"
      description: "[admin, user] lấy thông tin tài khoản"
      operationId: "layThongTinTaiKhoan"
      parameters:
      - name: "taiKhoan"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        # type: "integer"
        # maximum: 10.0
        # minimum: 1.0
        # format: "int64"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "user"
      summary: "Xóa tài khoản"
      description: "[admin] xóa tài khoản"
      operationId: "xoaTaiKhoan"
      parameters:
      - name: "taiKhoan"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        # type: "integer"
        # maximum: 10.0
        # minimum: 1.0
        # format: "int64"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/user/user-update:
    put:
      tags:
      - "user"
      summary: "Cập nhật thông tin tài khoản"
      description: "[admin, user] Cập nhật thông tin tài khoản"
      operationId: "capNhatTaiKhoan"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  # PHIM
  /api/phim/phim-list:
    get:
      tags:
      - "phim"
      summary: "Lấy danh sách phim"
      description: ""
      operationId: "danhSachPhim"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/phim/phim-paginate:
    get:
      tags:
      - "phim"
      summary: "Lấy danh sách phim phân trang"
      description: "[admin, user] lấy danh sách phim phân trang"
      operationId: "danhsachPhimPhanTrang"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/phim/phim-theo-ngay:
    get:
      tags:
      - "phim"
      summary: "Lấy danh sách phim phân trang"
      description: "[admin, user] lấy danh sách phim theo ngày"
      operationId: "danhsachPhimTheoNgay"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/phim/lay-thong-tin-phim:
    get:
      tags:
      - "phim"
      summary: "Lấy thông tin phim"
      description: "[admin, user] lấy thông tin phim"
      operationId: "layThongTinPhim"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/phim/tao-phim:
    post:
      tags:
      - "phim"
      summary: "Tạo phim mới"
      description: "[admin] tạo phim mới"
      operationId: "taoPhim"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/phim/upload-hinh-anh-phim/{maPhim}:
    post:
      tags:
      - "phim"
      summary: "Tạo phim mới"
      description: "[admin] upload hình ảnh cho phim"
      operationId: "uploadHinhAnhPhim"
      consumes:
      - "application/json"
      - "application/xml"
      - "multipart/form-data"
      produces:
      - "application/xml"
      - "application/json"
      - "multipart/form-data"
      parameters:
      - name: "maPhim"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        # type: "integer"
        # maximum: 10.0
        # minimum: 1.0
        # format: "int64"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/phim/{maPhim}:
    delete:
      tags:
      - "phim"
      summary: "Xóa Phim"
      description: "[admin] xóa phim"
      operationId: "xoaPhim"
      parameters:
      - name: "maPhim"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        # type: "integer"
        # maximum: 10.0
        # minimum: 1.0
        # format: "int64"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/QuanLyDatVe/DatVe:
    post:
      tags:
      - "QuanLyDatVe"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    # put:
    #   tags:
    #   - "QuanLyDatVe"
    #   summary: "Update an existing pet"
    #   description: ""
    #   operationId: "updatePet"
    #   consumes:
    #   - "application/json"
    #   - "application/xml"
    #   produces:
    #   - "application/xml"
    #   - "application/json"
    #   parameters:
    #   - in: "body"
    #     name: "body"
    #     description: "Pet object that needs to be added to the store"
    #     required: true
    #     schema:
    #       $ref: "#/definitions/Pet"
    #   responses:
    #     "400":
    #       description: "Invalid ID supplied"
    #     "404":
    #       description: "Pet not found"
    #     "405":
    #       description: "Validation exception"
    #   security:
    #   - petstore_auth:
    #     - "write:pets"
    #     - "read:pets"
  /api/QuanLyDatVe/LayDanhSachPhongVe:
    get:
      tags:
      - "QuanLyDatVe"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /api/QuanLyDatVe/TaoLichChieu:
    post:
      tags:
      - "QuanLyDatVe"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      # deprecated: true
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"